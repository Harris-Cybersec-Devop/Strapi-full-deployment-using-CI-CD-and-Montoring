---
- name: Deploy Strapi with Kubernetes and Monitoring Tools
  hosts: localhost
  become: yes
  tasks:

    - name: Ensure Minikube is installed
      command: minikube version
      register: minikube_installed
      failed_when: minikube_installed.rc != 0
      ignore_errors: true

    - name: Start Minikube
      command: minikube start
      when: minikube_installed.rc == 0 or minikube_installed.rc is undefined

    - name: Set Docker env to use Minikube's Docker daemon
      shell: |
        eval $(minikube docker-env)
        echo $DOCKER_HOST
      environment:
        DOCKER_HOST: ""

    - name: Create Kubernetes deployment file
      copy:
        dest: /tmp/strapi-deployment.yaml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: strapi-deployment
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: strapi
            template:
              metadata:
                labels:
                  app: strapi
              spec:
                containers:
                - name: strapi
                  image: {{ docker_hub_username }}/strapi-app:latest
                  ports:
                  - containerPort: 1337
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: strapi-service
          spec:
            type: NodePort
            selector:
              app: strapi
            ports:
            - port: 1337
              targetPort: 1337
              nodePort: 30001

    - name: Apply Strapi deployment
      command: kubectl apply -f /tmp/strapi-deployment.yaml

    - name: Run Prometheus container
      docker_container:
        name: prometheus
        image: prom/prometheus:latest
        ports:
          - "9090:9090"
        state: started
        restart_policy: always

    - name: Run Grafana container
      docker_container:
        name: grafana
        image: grafana/grafana:latest
        ports:
          - "3000:3000"
        state: started
        restart_policy: always

